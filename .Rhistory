png(filename="plot1.png", width=480, height=480)
#########################################################################
# manipulate
library(UsingR)
library(ggplot2)
library(manipulate)
data(galton)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR)
library(ggplot2)
library(manipulate)
data(galton)
myHist <- function(mu){
g <- ggplot(galton, aes(x = child))
g <- g + geom_histogram(fill = "salmon",
binwidth=1, aes(y = ..density..), colour = "black")
g <- g + geom_density(size = 2)
g <- g + geom_vline(xintercept = mu, size = 2)
mse <- round(mean((galton$child - mu)^2), 3)
g <- g + labs(title = paste('mu = ', mu, ' MSE = ', mse))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
p <- x/sum(x)
pbinom(7, size = 10, prob = .5, lower.tail = FALSE)
pbinom(7, size = 10, prob = .5, lower.tail = TRUE)
ppois(4, lambda = 6* 30/60) â€“ppois(3, lambda = 6 * 30/60)
ppois(4, lambda = 6* 30/60)
ppois(3, lambda = 6 * 30/60)
n <- 9
1100 + c(-1, 1) * qt(.975, n - 1) * 30 / sqrt(n)
(sd <- 2 * sqrt(n) / qt(.975, n - 1))
old.mean <- 5
old.var <- 0.68
old.n <- 10
new.mean <- 3
new.var <- 0.60
new.n <- 10
alpha <- (1 - .95)
(t <- qt(1 - alpha / 2, old.n + new.n - 2))
(sp <- sqrt(((old.n - 1) * old.var + (new.n - 1) * new.var) / (old.n + new.n - 2)))
(new.mean - old.mean) + c(-1, 1) * t * sp * sqrt(1 / old.n + 1 / new.n)
trt.n <- 9
trt.mean <- -3
trt.sd <- 1.5
trt.var <- trt.sd^2
plc.n <- 9
plc.mean <- 1
plc.sd <- 1.8
plc.var <- plc.sd^2
alpha <- (1 - .9)
(t <- qt(1 - alpha / 2, plc.n + trt.n - 2))
(sp <- sqrt(((plc.n - 1) * plc.var + (trt.n - 1) * trt.var) / (plc.n + trt.n - 2)))
(trt.mean - plc.mean) + c(-1, 1) * t * sp * sqrt(1 / plc.n + 1 / trt.n)
set.seed(18532)
sample.size <- 40
num.trials <- 1000
lambda <- 0.2
data <- matrix(data=NA,nrow=0,ncol=sample.size)
for (i in 1:num.trials) {
data <- rbind(data, rexp(sample.size, lambda))
}
data(mtcars)
summary(mtcars)
View(mtcars)
plot(cars)
dfbetas()
?dfbetas()
?dfbetas()
bestfit
initialmodel <- lm(mpg ~ ., data = mtcars)
bestfit <- step(initialmodel, direction = "both")
bestfit
influential <- dfbetas(bestfit)
tail(sort(influential[,6]),3)
influential <- dfbetas(bestfit)
inflluential
influential
tail(sort(influential[,3]),3)
tail(sort(influential[,5]),3)
tail(sort(influential[,4]),3)
library(ggplot2)
library(gridExtra)
library(ggplot2)
mpg_dist <- qplot(mtcars_vars$mpg, fill = I("red"))
wt_dist <- qplot(mtcars_vars$wt, fill = I("lightblue"))
qsec_dist <- qplot(mtcars_vars$qsec, fill = I("purple"))
am_dist <- qplot(mtcars_vars$am, fill = I("green"))
grid.arrange(mpg_dist, wt_dist, qsec_dist, am_dist, ncol = 2)
mpg_dist <- qplot(mtcars_vars$mpg, fill = I("red"))
wt_dist <- qplot(mtcars_vars$wt, fill = I("lightblue"))
qsec_dist <- qplot(mtcars_vars$qsec, fill = I("purple"))
am_dist <- qplot(mtcars_vars$am, fill = I("green"))
library(ggplot2)
library(gridExtra)
source('~/DataScience/Module7/Week 2 code.R')
setwd("~/DataScience/Module8/Data")
library("caret", lib.loc="~/R/win-library/3.1")
library("kernlab", lib.loc="~/R/win-library/3.1")
install.packages("rattle")
setwd("~/DataScience/Module8/Data")
library(caret)
library(kernlab)
library(ggplot2)
testing<-read.csv(file="Set B C_Labels.csv",head=TRUE,sep=",")
training<-read.csv(file="Set A C_Labels.csv",head=TRUE,sep=",")
testing$ACTION <- as.factor(testing$ACTION)
training$ACTION<-as.factor(training$ACTION)
as.numeric(Sys.time())-> t;
set.seed((t - floor(t)) * 1e8 -> seed);
print(seed)
library("rpart", lib.loc="~/R/win-library/3.1")
caret(party,rpart)
install.packages("gmb")
install.packages("gbm")
library("gbm", lib.loc="~/R/win-library/3.1")
setwd("~/DataScience/Module8/Data")
pmlTrain<-read.csv("pml-training.csv", header=T, na.strings=c("NA", "#DIV/0!"))
pmlTest<-read.csv("pml-testing.csv", header=T, na.string=c("NA", "#DIV/0!"))
noNApmlTrain<-pmlTrain[, apply(pmlTrain, 2, function(x) !any(is.na(x)))]
dim(noNApmlTrain)
cleanpmlTrain<-noNApmlTrain[,-c(1:8)]
dim(cleanpmlTrain)
cleanpmltest<-pmlTest[,names(cleanpmlTrain[,-52])]
dim(cleanpmltest)
library(caret)
inTrain<-createDataPartition(y=cleanpmlTrain$classe, p=0.75,list=F)
training<-cleanpmlTrain[inTrain,]
test<-cleanpmlTrain[-inTrain,]
#Training and test set dimensions
dim(training)
dim(test)
predrf<-predict(rffit, newdata=test)
confusionMatrix(predrf, test$classe)
install.packages("rffit")
rffit
install.packages("predrf")
predrf<-predict(rffit, newdata=test)
confusionMatrix(predrf, test$classe)
predrf<-predict(rffit, newdata=test)
?rffit
? rffit
install.packages("rffit")
install.packages("rffit,dependencies=True")
confusionMatrix(predrf, test$classe)
setwd("~/DataScience/Module8/Data")
library(caret)
library(kernlab)
library(ggplot2)
testing<-read.csv(file="Set B C_Labels.csv",head=TRUE,sep=",")
training<-read.csv(file="Set A C_Labels.csv",head=TRUE,sep=",")
testing$ACTION <- as.factor(testing$ACTION)
training$ACTION<-as.factor(training$ACTION)
as.numeric(Sys.time())-> t;
set.seed((t - floor(t)) * 1e8 -> seed);
print(seed)
predrf<-predict(rpart, newdata=test)
install.packages("predict")
setwd("~/DataScience/Module8/Data")
pmlTrain<-read.csv("pml-training.csv", header=T, na.strings=c("NA", "#DIV/0!"))
pmlTest<-read.csv("pml-testing.csv", header=T, na.string=c("NA", "#DIV/0!"))
noNApmlTrain<-pmlTrain[, apply(pmlTrain, 2, function(x) !any(is.na(x)))]
dim(noNApmlTrain)
cleanpmlTrain<-noNApmlTrain[,-c(1:8)]
dim(cleanpmlTrain)
cleanpmltest<-pmlTest[,names(cleanpmlTrain[,-52])]
dim(cleanpmltest)
library(caret)
inTrain<-createDataPartition(y=cleanpmlTrain$classe, p=0.75,list=F)
training<-cleanpmlTrain[inTrain,]
test<-cleanpmlTrain[-inTrain,]
#Training and test set dimensions
dim(training)
dim(test)
predrf<-predict(rffit, newdata=test)
library(caret)
set.seed(13333)
fitControl2<-trainControl(method="cv", number=5, allowParallel=T, verbose=T)
rffit<-train(classe~.,data=training, method="rf", trControl=fitControl2, verbose=F)
predrf<-predict(rffit, newdata=test)
confusionMatrix(predrf, test$classe)
predrf<-predict(rffit, newdata=test)
rffit<-train(classe~.,data=training, method="rf", trControl=fitControl2, verbose=F)
predrf<-predict(rffit, newdata=test)
confusionMatrix(predrf, test$classe)
pred20<-predict(rffit, newdata=cleanpmltest)
pred20
gmbfit<-train(classe~.,data=training, method="gbm", trControl=fitControl2, verbose=F)
fitControl2<-trainControl(method="cv", number=5, allowParallel=T, verbose=T)
gmbfit$finalModel
class(gmbfit)
predgmb<-predict(gmbfit, newdata=test)
confusionMatrix(predgmb, test$classe)
predtrain<-predict(gmbfit, newdata=training)
confusionMatrix(predtrain, training$classe)
predtrain<-predict(gmbfit, newdata=training)
confusionMatrix(predtrain, training$classe)
```
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:20){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:20){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:20){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:20){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred20)
for(i in 1:20){
quit
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
:q!
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred20)
library("caret", lib.loc="~/R/win-library/3.1")
library(caret)
library(caret)
library(kernlab)
library(ggplot2)
library(pROC)
install.pacakages("pROC")
install.packages("pROC")
library(caret)
library(kernlab)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
